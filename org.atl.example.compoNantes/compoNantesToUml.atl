-- @path COMPO=/org.xtext.example.compoNantes/model/generated/CompoNantes.ecore
-- @nsURI UML=/org.xtext.example.compoNantes/model/reference/UML.ecore

module compoNantesToUml;
create OUT : UML from IN : COMPO;

helper context COMPO!Component def: getProvided() : Sequence(COMPO!Interface) = 
	self.interfaces->collect(e|e.type.toString()='provided')
;
rule CpnSubToUmlEl {
	from
		CpnSub : COMPO!SubSystem
	to
		el : UML!Component(
			name <- CpnSub.name,
			ownedElement <- CpnSub.components
		)
}
rule ComponanteToComponent {
	from
		cpn : COMPO!Component
	to 
		cn : UML!Component (
			name <- cpn.name,
			ownedPort <- cpn.ports,
			provided <- cpn.getProvided(),
			ownedConnector <- cpn.connectors
		)
}

rule CpnIntToUmlInt {
	from
		CpnInt : COMPO!Interface
	to
		UmlInt : UML!Interface (
			name <- CpnInt.name
			
		)
}

rule CpnConToUmlCon {
	from
		CpnCon : COMPO!Connector
	to
		UmlCon : UML!Connector (
			name <- CpnCon.name
		)
}