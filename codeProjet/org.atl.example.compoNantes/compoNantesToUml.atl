-- @path COMPO=/org.xtext.example.compoNantes/model/generated/CompoNantes.ecore
-- @nsURI UML=/org.xtext.example.compoNantes/model/reference/UML.ecore

module compoNantesToUml;
create OUT : UML from IN : COMPO;

helper context COMPO!Component 
	def: getProvided() : Set(COMPO!Interface) = 
	self.interfaces->collect(e|e.type.toString()='provided')
;
helper context COMPO!Component 
	def: getRequired() : Set(COMPO!Interface) = 
	self.interfaces->collect(e|e.type.toString()='required')
;
rule CpnComponentToUmlComponent {
	from
		CpnComp : COMPO!Component
	to 
		UmlComp : UML!Component (
			name <- CpnComp.name,
			ownedPort <- CpnComp.ports,
			provided <- CpnComp.getProvided(),
			required <- CpnComp.getRequired(),
			ownedConnector <- CpnComp.connectors
		)
}

rule CpnIntToUmlInt {
	from
		CpnInt : COMPO!Interface
	to
		UmlInt : UML!Interface (
			name <- CpnInt.name
		)
}

rule CpnConToUmlCon {
	from
		CpnCon : COMPO!Connector
	to
		UmlCon : UML!Connector (
			name <- CpnCon.name
		)
}

rule CpnPrtToUmlPrt {
	from
		CpnPrt : COMPO!Port
	to
		UmlPrt : UML!Port (
			name <- CpnPrt.name
		)
}