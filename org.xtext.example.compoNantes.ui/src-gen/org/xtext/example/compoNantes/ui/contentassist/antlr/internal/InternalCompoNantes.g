/*
 * generated by Xtext
 */
grammar InternalCompoNantes;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.compoNantes.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.compoNantes.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.compoNantes.services.CompoNantesGrammarAccess;

}

@parser::members {
 
 	private CompoNantesGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CompoNantesGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getSubsystemAssignment()); }
(rule__Model__SubsystemAssignment)*
{ after(grammarAccess.getModelAccess().getSubsystemAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubSystem
entryRuleSubSystem 
:
{ before(grammarAccess.getSubSystemRule()); }
	 ruleSubSystem
{ after(grammarAccess.getSubSystemRule()); } 
	 EOF 
;

// Rule SubSystem
ruleSubSystem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubSystemAccess().getGroup()); }
(rule__SubSystem__Group__0)
{ after(grammarAccess.getSubSystemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponent
entryRuleComponent 
:
{ before(grammarAccess.getComponentRule()); }
	 ruleComponent
{ after(grammarAccess.getComponentRule()); } 
	 EOF 
;

// Rule Component
ruleComponent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComponentAccess().getGroup()); }
(rule__Component__Group__0)
{ after(grammarAccess.getComponentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterface
entryRuleInterface 
:
{ before(grammarAccess.getInterfaceRule()); }
	 ruleInterface
{ after(grammarAccess.getInterfaceRule()); } 
	 EOF 
;

// Rule Interface
ruleInterface
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceAccess().getGroup()); }
(rule__Interface__Group__0)
{ after(grammarAccess.getInterfaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePort
entryRulePort 
:
{ before(grammarAccess.getPortRule()); }
	 rulePort
{ after(grammarAccess.getPortRule()); } 
	 EOF 
;

// Rule Port
rulePort
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPortAccess().getGroup()); }
(rule__Port__Group__0)
{ after(grammarAccess.getPortAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDependency
entryRuleDependency 
:
{ before(grammarAccess.getDependencyRule()); }
	 ruleDependency
{ after(grammarAccess.getDependencyRule()); } 
	 EOF 
;

// Rule Dependency
ruleDependency
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDependencyAccess().getGroup()); }
(rule__Dependency__Group__0)
{ after(grammarAccess.getDependencyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUsage
entryRuleUsage 
:
{ before(grammarAccess.getUsageRule()); }
	 ruleUsage
{ after(grammarAccess.getUsageRule()); } 
	 EOF 
;

// Rule Usage
ruleUsage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUsageAccess().getGroup()); }
(rule__Usage__Group__0)
{ after(grammarAccess.getUsageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__SubsystemAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSubsystemSubSystemParserRuleCall_0_0()); }
	ruleSubSystem
{ after(grammarAccess.getModelAccess().getSubsystemSubSystemParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getSubsystemComponentParserRuleCall_0_1()); }
	ruleComponent
{ after(grammarAccess.getModelAccess().getSubsystemComponentParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getREQUIREDEnumLiteralDeclaration_0()); }
(	'required' 
)
{ after(grammarAccess.getTypeAccess().getREQUIREDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getPROVIDEDEnumLiteralDeclaration_1()); }
(	'provided' 
)
{ after(grammarAccess.getTypeAccess().getPROVIDEDEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__SubSystem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystem__Group__0__Impl
	rule__SubSystem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getSubsystemKeyword_0()); }

	'subsystem' 

{ after(grammarAccess.getSubSystemAccess().getSubsystemKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystem__Group__1__Impl
	rule__SubSystem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getNameAssignment_1()); }
(rule__SubSystem__NameAssignment_1)
{ after(grammarAccess.getSubSystemAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystem__Group__2__Impl
	rule__SubSystem__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getSubSystemAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystem__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystem__Group__3__Impl
	rule__SubSystem__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getComponentsAssignment_3()); }
(rule__SubSystem__ComponentsAssignment_3)*
{ after(grammarAccess.getSubSystemAccess().getComponentsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystem__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystem__Group__4__Impl
	rule__SubSystem__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getInterfacesAssignment_4()); }
(rule__SubSystem__InterfacesAssignment_4)*
{ after(grammarAccess.getSubSystemAccess().getInterfacesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystem__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystem__Group__5__Impl
	rule__SubSystem__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getPortsAssignment_5()); }
(rule__SubSystem__PortsAssignment_5)*
{ after(grammarAccess.getSubSystemAccess().getPortsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystem__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystem__Group__6__Impl
	rule__SubSystem__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getDependenciesAssignment_6()); }
(rule__SubSystem__DependenciesAssignment_6)*
{ after(grammarAccess.getSubSystemAccess().getDependenciesAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystem__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystem__Group__7__Impl
	rule__SubSystem__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getUsagesAssignment_7()); }
(rule__SubSystem__UsagesAssignment_7)*
{ after(grammarAccess.getSubSystemAccess().getUsagesAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystem__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystem__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getSubSystemAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Component__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__0__Impl
	rule__Component__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getComponentKeyword_0()); }

	'component' 

{ after(grammarAccess.getComponentAccess().getComponentKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__1__Impl
	rule__Component__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getNameAssignment_1()); }
(rule__Component__NameAssignment_1)
{ after(grammarAccess.getComponentAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__2__Impl
	rule__Component__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__3__Impl
	rule__Component__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getInterfacesAssignment_3()); }
(rule__Component__InterfacesAssignment_3)*
{ after(grammarAccess.getComponentAccess().getInterfacesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__4__Impl
	rule__Component__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getPortsAssignment_4()); }
(rule__Component__PortsAssignment_4)*
{ after(grammarAccess.getComponentAccess().getPortsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__5__Impl
	rule__Component__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getDependenciesAssignment_5()); }
(rule__Component__DependenciesAssignment_5)*
{ after(grammarAccess.getComponentAccess().getDependenciesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__6__Impl
	rule__Component__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getUsagesAssignment_6()); }
(rule__Component__UsagesAssignment_6)*
{ after(grammarAccess.getComponentAccess().getUsagesAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Interface__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__0__Impl
	rule__Interface__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getInterfaceKeyword_0()); }

	'interface' 

{ after(grammarAccess.getInterfaceAccess().getInterfaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__1__Impl
	rule__Interface__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getTypeAssignment_1()); }
(rule__Interface__TypeAssignment_1)
{ after(grammarAccess.getInterfaceAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNameAssignment_2()); }
(rule__Interface__NameAssignment_2)
{ after(grammarAccess.getInterfaceAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Port__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Port__Group__0__Impl
	rule__Port__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getPortKeyword_0()); }

	'port' 

{ after(grammarAccess.getPortAccess().getPortKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Port__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Port__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getNameAssignment_1()); }
(rule__Port__NameAssignment_1)
{ after(grammarAccess.getPortAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Dependency__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dependency__Group__0__Impl
	rule__Dependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyAccess().getDependencyKeyword_0()); }

	'dependency' 

{ after(grammarAccess.getDependencyAccess().getDependencyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dependency__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dependency__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyAccess().getComponentAssignment_1()); }
(rule__Dependency__ComponentAssignment_1)
{ after(grammarAccess.getDependencyAccess().getComponentAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Usage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Usage__Group__0__Impl
	rule__Usage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Usage__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsageAccess().getUsageKeyword_0()); }

	'usage' 

{ after(grammarAccess.getUsageAccess().getUsageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Usage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Usage__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Usage__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsageAccess().getComponentAssignment_1()); }
(rule__Usage__ComponentAssignment_1)
{ after(grammarAccess.getUsageAccess().getComponentAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__SubsystemAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSubsystemAlternatives_0()); }
(rule__Model__SubsystemAlternatives_0)
{ after(grammarAccess.getModelAccess().getSubsystemAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSubSystemAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__ComponentsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getComponentsComponentParserRuleCall_3_0()); }
	ruleComponent{ after(grammarAccess.getSubSystemAccess().getComponentsComponentParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__InterfacesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getInterfacesInterfaceParserRuleCall_4_0()); }
	ruleInterface{ after(grammarAccess.getSubSystemAccess().getInterfacesInterfaceParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__PortsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getPortsPortParserRuleCall_5_0()); }
	rulePort{ after(grammarAccess.getSubSystemAccess().getPortsPortParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__DependenciesAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getDependenciesDependencyParserRuleCall_6_0()); }
	ruleDependency{ after(grammarAccess.getSubSystemAccess().getDependenciesDependencyParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystem__UsagesAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemAccess().getUsagesUsageParserRuleCall_7_0()); }
	ruleUsage{ after(grammarAccess.getSubSystemAccess().getUsagesUsageParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Component__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Component__InterfacesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getInterfacesInterfaceParserRuleCall_3_0()); }
	ruleInterface{ after(grammarAccess.getComponentAccess().getInterfacesInterfaceParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Component__PortsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getPortsPortParserRuleCall_4_0()); }
	rulePort{ after(grammarAccess.getComponentAccess().getPortsPortParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Component__DependenciesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getDependenciesDependencyParserRuleCall_5_0()); }
	ruleDependency{ after(grammarAccess.getComponentAccess().getDependenciesDependencyParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Component__UsagesAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getUsagesUsageParserRuleCall_6_0()); }
	ruleUsage{ after(grammarAccess.getComponentAccess().getUsagesUsageParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getTypeTypeEnumRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getInterfaceAccess().getTypeTypeEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Port__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPortAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__ComponentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyAccess().getComponentTrucCrossReference_1_0()); }
(
{ before(grammarAccess.getDependencyAccess().getComponentTrucQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getDependencyAccess().getComponentTrucQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDependencyAccess().getComponentTrucCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Usage__ComponentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsageAccess().getComponentTrucCrossReference_1_0()); }
(
{ before(grammarAccess.getUsageAccess().getComponentTrucQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getUsageAccess().getComponentTrucQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getUsageAccess().getComponentTrucCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


